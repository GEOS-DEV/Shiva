name: ShivaCI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
   group: ${{ github.workflow }}-${{ github.ref }}
   cancel-in-progress: true

jobs:

  # code_style:
  #   needs: [check_pull_request_is_not_a_draft]
  #   runs-on: ubuntu-22.04
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #       lfs: false
  #   - name: Check style
  #     env:
  #       DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
  #       CMAKE_BUILD_TYPE: Release
  #       BUILD_AND_TEST_ARGS: --test-code-style
  #     run: ./scripts/ci_build_and_test.sh

  doxygen_check:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: true
        lfs: false
    - name: Check doxygen
      env:
        DOCKER_REPOSITORY: geosx/ubuntu:22.04
        HOST_CONFIG: hostconfigs/environment.cmake
        CMAKE_CXX_COMPILER: /usr/bin/clang++
        CMAKE_C_COMPILER: /usr/bin/clang
        CMAKE_BUILD_TYPE: Release
        BUILD_AND_TEST_ARGS: --test-doxygen
      run: ./scripts/ci_build_and_test.sh


  code_checks:
        runs-on: ubuntu-22.04
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v3
          with:
            submodules: true
            lfs: false
        - name: code_checks
          env:
            DOCKER_REPOSITORY: geosx/ubuntu:22.04
            HOST_CONFIG: hostconfigs/environment.cmake
            CMAKE_CXX_COMPILER: /usr/bin/clang++
            CMAKE_C_COMPILER: /usr/bin/clang
            CMAKE_BUILD_TYPE: Release
            BUILD_AND_TEST_ARGS: --code_checks
          run: ./scripts/ci_build_and_test.sh
        - name: Upload coverage reports to Codecov
          uses: codecov/codecov-action@v3
          env:
            CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  linux_builds:
    name: ${{matrix.name}}
    runs-on: ${{matrix.os}}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        include:
          - name: RHEL8.8-clang15-dbg (ubi8.8, clang-15.0.7, Debug)
            DOCKER_REPOSITORY: geosx/ubi:8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: clang++
            CMAKE_C_COMPILER: clang
            CMAKE_BUILD_TYPE: Debug

          - name: RHEL8.8-clang15-rel (ubi8.8, clang-15.0.7, Release)
            DOCKER_REPOSITORY: geosx/ubi:8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: clang++
            CMAKE_C_COMPILER: clang
            CMAKE_BUILD_TYPE: Release

          - name: RHEL8.8-gcc12-dbg (ubi8.8, gcc 12.2.1, Debug)
            DOCKER_REPOSITORY: geosx/ubi:8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /opt/rh/gcc-toolset-12/root/bin/g++
            CMAKE_C_COMPILER: /opt/rh/gcc-toolset-12/root/bin/gcc
            CMAKE_BUILD_TYPE: Debug

          - name: RHEL8.8-gcc12-rel (ubi8.8, gcc 12.2.1, Release)
            DOCKER_REPOSITORY: geosx/ubi:8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /opt/rh/gcc-toolset-12/root/bin/g++
            CMAKE_C_COMPILER: /opt/rh/gcc-toolset-12/root/bin/gcc
            CMAKE_BUILD_TYPE: Release

          - name: ubuntu22-gcc11-rel (ubi8.8, gcc 11.4.0, Release)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/g++
            CMAKE_C_COMPILER: /usr/bin/gcc
            CMAKE_BUILD_TYPE: Release
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-clang14-rel (ubi8.8, clang-14.0.0, Release)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/clang++
            CMAKE_C_COMPILER: /usr/bin/clang
            CMAKE_BUILD_TYPE: Release
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-clang14-dbg (ubi8.8, clang-14.0.0, Debug)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/clang++
            CMAKE_C_COMPILER: /usr/bin/clang
            CMAKE_BUILD_TYPE: Debug
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-gcc11-dbg (ubi8.8, gcc 11.4.0, Release)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/g++
            CMAKE_C_COMPILER: /usr/bin/gcc
            CMAKE_BUILD_TYPE: Debug
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-gcc11-cuda11-rel (ubi8.8, gcc 11.4.0, cuda-11.8.0, Release)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04-cuda11.8.0
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/g++
            CMAKE_C_COMPILER: /usr/bin/gcc
            CMAKE_BUILD_TYPE: Release
            ENABLE_CUDA: ON
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-gcc11-cuda11-dbg (ubi8.8, gcc 11.4.0, cuda-11.8.0, Debug)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04-cuda11.8.0
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/g++
            CMAKE_C_COMPILER: /usr/bin/gcc
            CMAKE_BUILD_TYPE: Debug
            ENABLE_CUDA: ON
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-clang14-cuda11-rel (ubi8.8, clang-14.0.0, cuda-11.8.0, Release)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04-cuda11.8.0
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/clang++
            CMAKE_C_COMPILER: /usr/bin/clang
            CMAKE_BUILD_TYPE: Release
            ENABLE_CUDA: ON
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: ubuntu22-clang14-cuda11-dbg (ubi8.8, clang-14.0.0, cuda-11.8.0, Debug)
            DOCKER_REPOSITORY: geosx/ubuntu:22.04-cuda11.8.0
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /usr/bin/clang++
            CMAKE_C_COMPILER: /usr/bin/clang
            CMAKE_BUILD_TYPE: Debug
            ENABLE_CUDA: ON
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: RHEL8.8-clang15-cuda12-rel (ubi8.8, clang-15.0.7, cuda-12.2.2, Release)
            DOCKER_REPOSITORY: geosx/ubi:8.8-cuda12.2.2
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: clang++
            CMAKE_C_COMPILER: clang
            CMAKE_BUILD_TYPE: Release
            ENABLE_CUDA: ON
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

          - name: RHEL8.8-gcc12-cuda12-rel (ubi8.8, gcc 12.2.1, cuda-12.2.2, Release)
            DOCKER_REPOSITORY: geosx/ubi:8.8-cuda12.2.2
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /opt/rh/gcc-toolset-12/root/bin/g++
            CMAKE_C_COMPILER: /opt/rh/gcc-toolset-12/root/bin/gcc
            CMAKE_BUILD_TYPE: Release
            ENABLE_CUDA: ON
            BUILD_AND_TEST_ARGS: "--disable-unit-tests"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: true
        lfs: false

    - name: Print environment
      run: printenv

    - name: Build and test
      env:
        DOCKER_REPOSITORY: ${{ matrix.DOCKER_REPOSITORY }}
        CMAKE_CXX_COMPILER: ${{ matrix.CMAKE_CXX_COMPILER }}
        CMAKE_C_COMPILER: ${{ matrix.CMAKE_C_COMPILER }}
        CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
        ENABLE_CUDA: ${{ matrix.ENABLE_CUDA }}
        BUILD_AND_TEST_ARGS: ${{ matrix.BUILD_AND_TEST_ARGS }} --build-exe
        HOST_CONFIG: hostconfigs/environment.cmake
      run: ./scripts/ci_build_and_test.sh

  check_that_all_jobs_succeeded:
    runs-on: ubuntu-22.04
    needs:
    - linux_builds
    - doxygen_check
    - code_checks
    if: ${{ always() }}
    env:
      RETURN_VAL: |
        ${{
        needs.linux_builds.result == 'success' &&
        needs.doxygen_check.result == 'success' &&
        needs.code_checks.result == 'success'
        }}
    steps:
    - name: PR Success
      if: ${{ contains(env.RETURN_VAL, 'true') }}
      run: "true"
    - name: PR Failure
      if: ${{ contains(env.RETURN_VAL, 'false') }}
      run: "false"