name: ShivaCI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
   group: ${{ github.workflow }}-${{ github.ref }}
   cancel-in-progress: true

jobs:

  # code_style:
  #   needs: [check_pull_request_is_not_a_draft]
  #   runs-on: ubuntu-22.04
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #       lfs: false
  #   - name: Check style
  #     env:
  #       DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
  #       CMAKE_BUILD_TYPE: Release
  #       BUILD_AND_TEST_ARGS: --test-code-style
  #     run: ./scripts/ci_build_and_test.sh

  # documentation:
  #   needs: [check_pull_request_is_not_a_draft]
  #   runs-on: ubuntu-22.04
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #       lfs: false
  #   - name: Check documentation
  #     env:
  #       DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
  #       CMAKE_BUILD_TYPE: Release
  #       BUILD_AND_TEST_ARGS: --test-documentation
  #     run: ./scripts/ci_build_and_test.sh


  linux_builds:
    name: ${{matrix.name}}
    runs-on: ${{matrix.os}}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        include:
          - name: RHEL8.8-clang15-deb (ubi8.8, clang-15.0.7, Debug)
            DOCKER_REPOSITORY: geosx/ubi8:ubi8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: clang++
            CMAKE_C_COMPILER: clang
            CMAKE_BUILD_TYPE: Debug

          - name: RHEL8.8-clang15-rel (ubi8.8, clang-15.0.7, Release)
            DOCKER_REPOSITORY: geosx/ubi8:ubi8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: clang++
            CMAKE_C_COMPILER: clang
            CMAKE_BUILD_TYPE: Release
            CLANGTIDY_EXECUTABLE: clang-tidy

          - name: RHEL8.8-gcc12-deb (ubi8.8, gcc 12.2.1, Debug)
            DOCKER_REPOSITORY: geosx/ubi8:ubi8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /opt/rh/gcc-toolset-12/root/bin/g++
            CMAKE_C_COMPILER: /opt/rh/gcc-toolset-12/root/bin/gcc
            CMAKE_BUILD_TYPE: Debug

          - name: RHEL8.8-gcc12-rel (ubi8.8, gcc 12.2.1, Release)
            DOCKER_REPOSITORY: geosx/ubi8:ubi8.8-854
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /opt/rh/gcc-toolset-12/root/bin/g++
            CMAKE_C_COMPILER: /opt/rh/gcc-toolset-12/root/bin/gcc
            CMAKE_BUILD_TYPE: Release

          - name: RHEL8.8-clang15-cuda11-rel (ubi8.8, clang-15.0.7, cuda-11.8.0, Release)
            DOCKER_REPOSITORY: geosx/ubi8:ubi8.8-cuda11.8.0
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: clang++
            CMAKE_C_COMPILER: clang
            CMAKE_BUILD_TYPE: Release
            ENABLE_CUDA: ON

          - name: RHEL8.8-gcc12-cuda11-rel (ubi8.8, gcc 12.2.1, cuda-11.8.0, Release)
            DOCKER_REPOSITORY: geosx/ubi8:ubi8.8-cuda11.8.0
            OS: ubuntu-22.04
            CMAKE_CXX_COMPILER: /opt/rh/gcc-toolset-12/root/bin/g++
            CMAKE_C_COMPILER: /opt/rh/gcc-toolset-12/root/bin/gcc
            CMAKE_BUILD_TYPE: Release
            ENABLE_CUDA: ON

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: true
        lfs: false

    - name: Print environment
      run: printenv

    - name: Build and test
      env:
        DOCKER_REPOSITORY: ${{ matrix.DOCKER_REPOSITORY }}
        CMAKE_CXX_COMPILER: ${{ matrix.CMAKE_CXX_COMPILER }}
        CMAKE_C_COMPILER: ${{ matrix.CMAKE_C_COMPILER }}
        CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
        ENABLE_CUDA: ${{ matrix.ENABLE_CUDA }}
        HOST_CONFIG: hostconfigs/environment.cmake
      run: ./scripts/ci_build_and_test.sh
