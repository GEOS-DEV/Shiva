@startuml(id=ShivaInterface)

!pragma useNewPackage
set separator .


namespace ShivaInterface {


namespace functions {

namespace spacing {
  class EqualSpacing {
  }
  class GaussLegendreSpacing {
  }
  class GaussLobattoSpacing {
  }
}

class LagrangeBasis< REAL_TYPE, ORDER, SPACING_TYPE > {
  using SpacingType = SPACING_TYPE;
  constexpr REAL_TYPE value( REAL_TYPE const & coord );
  constexpr REAL_TYPE gradient( REAL_TYPE const & coord );
}


class BasisNURBS {
}


LagrangeBasis::SpacingType <-- EqualSpacing
LagrangeBasis::SpacingType <-- GaussLegendreSpacing
LagrangeBasis::SpacingType <-- GaussLobattoSpacing


namespace Quadrature {

interface Quadrature{}

class QuadratureGaussLegendre<INDEX_TYPE, REAL_TYPE, NUM_PTS> {
+constexpr int m_numPoints = NUM_PTS;
+constexpr getCoord( INDEX_TYPE const qi );
}

class QuadratureGaussLobatto<INDEX_TYPE, REAL_TYPE, NUM_PTS> {
  +constexpr int m_numPoints = NUM_PTS;
  +constexpr getCoord( INDEX_TYPE const qi );
}

}

GaussLegendreSpacing <|-- QuadratureGaussLegendre
GaussLobattoSpacing <|-- QuadratureGaussLobatto

}

namespace Geometry {
namespace Cell {

interface NCube {
  Basic geometry for a n-cube
}

interface Tet{
  Basic geometry for a triangle
}

interface Pyramid{
  Basic geometry for a pyramid
}

interface Wedge{
  Basic geometry for a wedge
}

interface MappingData {
  This family of classes have a dual role.
  There is type information and constexpr quantities for use from the type,
  and there is data that is for use when instantiated.
  This can be broken up into separate classes if motivated.
  +constexpr int numVertices()
  +constexpr int numEdges()
  +constexpr int numFaces()
}

class LinearTransform {
  +using IndexType = int;
  +using JacobianType = real64[3][3];
  +constexpr bool jacobianIsConstInCell = false;
  +REAL_TYPE m_VertexCoords[4/5/6/8][3]
  +constexpr vertexParentCoords( IndexType const vindex, int const component )
  +inline vertexCoords( IndexType const vindex, int const component ) override final;
}

class Scaling {
  +using IndexType = <int,int,int>};
  +using JacobianType = real64[3];
  +constexpr bool jacobianIsConstInCell = true;
  +REAL_TYPE m_h[3]
  +constexpr vertexParentCoords( IndexType const vindex, int const component )
  +inline vertexCoords( IndexType const vindex, int const component ) override final;
}

class UniformScaling {
  +using IndexType = <int,int,int>};
  +using JacobianType = real64;
  +constexpr bool jacobianIsConstInCell = true;
  +REAL_TYPE m_h
  +constexpr vertexParentCoords( IndexType const vindex, int const component )
  +inline vertexCoords( IndexType const vindex, int const component ) override final;
}

Mapping <|-- UniformScaling
Mapping <|--- Scaling
Mapping <|---- LinearTransform
}


entity Mapping {
  +jacobianTransform<CELL,BASIS,JACOBIAN>( CELL const & cell, REAL_TYPE const &(parentCoord)[3], JACOBIAN & J )
  +inverseJacobianTransform<CELL,BASIS,JACOBIAN>( CELL const & cell, REAL_TYPE const &(parentCoord)[3], JACOBIAN & invJ, real64 & detJ )

  +inverseJacobianTransform<CELL,JACOBIAN>( CELL const & cell, JACOBIAN & invJ, real64 & detJ )
}

  Mapping::jacobianTransform -- jacobianTransformNote
}

namespace FiniteElementMethod {



class ParentElement< CELL, BASIS > {
  +using FunctionSpaceType = FUNCSPACE;
  +using CellType = CELL;
  +using BasisType = BASIS;
  +using IndexType = CELL::IndexType;
  +using JacobianType = CELL::JacobianType;
  +constexpr int NSP = f ( BASIS, CELL, FUNC_SPACE )
  +real64 shapeFunctionValue( int const a, REAL_TYPE const (&parentCoord)[DIMS] )
  +shapeFunctionGradient( int const a, REAL_TYPE const (&parentCoord)[DIMS] , real64 &(parentGrad)[3] )
  +VAR_TYPE value<VAR_TYPE>( VAR_TYPE const & var[NSP], REAL_TYPE const (&parentCoord)[DIMS] )
  +parentGradient( VAR_TYPE const (&var)[NSP], REAL_TYPE const (&parentCoord)[DIMS] , real64 &(parentGrad)[3] )
}

class FiniteElementSpace< PARENTELEMENT, MAPPING > {
  +using ParentElementType = PARENTELEMENT;
  +using CellType = PARENTELEMENT::CellType;
  +using BasisType = PARENTELEMENT::BasisType;
  +using MappingType = MAPPING;
  +using IndexType = PARENTELEMENT::IndexType;
  +using PARENTELEMENT::NSP;
  +using JacobianType = PARENTELEMENT::JacobianType;
  +jacobianTransform( CellType const & cell, REAL_TYPE const &(parentCoord)[3], JacobianType & J )
  +VAR_TYPE value<VAR_TYPE>( VAR_TYPE const & var[NSP], REAL_TYPE const (&parentCoord)[DIMS] )
  +gradient( VAR_TYPE const (&var)[NSP], REAL_TYPE const (&parentCoord)[DIMS] , JacobianType const &(J), real64 &(grad)[3] )

}


class FiniteElementInterface< FESPACE, QUADRATURE >  {

  +using FiniteElementSpaceType = FESPACE;
  +using QuadratureType = QUADRATURE;
  +using CellType = FESPACE::CellType;
  +using IndexType = FESPACE::IndexType;
  +using FESPACE::NSP;
  +constexpr int numQP = QUADRATURE::numPoints;
  +using JacobianType = FiniteElementSpace::JacobianType;

  +using LOCAL_DOF_ARRAY_TYPE<DOF_DIMS> = DofArrayHelper<DOF_DIMS,NSP>::LOCAL_DOF_ARRAY_TYPE;
  +jacobianTransform( int const q, CELL const & cell, JacobianType &(J) )
  +jacobianTransform( CELL const & cell, JacobianType &(J)[numQP] )
  +value( INDEX_TYPE const q, LOCAL_DOF_ARRAY_TYPE const &dofs )
  +gradient( INDEX_TYPE const q, LOCAL_DOF_ARRAY_TYPE<DOF_DIMS> const &var , JacobianType const (&invJ), real64 const &(gradVar)[3] )
  +gradient( INDEX_TYPE const q, LOCAL_DOF_ARRAY_TYPE<DOF_DIMS> const &var , JacobianType const (&invJ), real64 const &(gradVar)[DOF_DIMS][3] )
}

class DofArrayHelper<NUM_DOF_VALUES_PER_POINT,NSP>{
  specialize on NUM_DOF_VALUES_PER_POINT
  --
  +using NumDofValuesPerPoint = NUM_DOF_VALUES_PER_POINT
  +using LOCAL_DOF_ARRAY_TYPE = real64[NSP]
  +using LOCAL_DOF_ARRAY_TYPE = real64[NSP][NUM_DOF_VALUES_PER_POINT]
}



FiniteElementInterface +-- DofArrayHelper






class FunctionalSpace {
  H1, L2, Hdiv
}



interface JacobianTransformTypeHelper {
  real64 inverse<T>( T const & J, T & Jinv )
  void inverseTransform<CELL,T>( T & Jinv, real64 & detJ )
}


FiniteElementInterface::FiniteElementSpaceType <-- FiniteElementSpace
FiniteElementSpace::ParentElementType <-- ParentElement
FiniteElementInterface::QuadratureType <-- Quadrature.Quadrature
ParentElement::FunctionSpaceType <-- FunctionalSpace
ParentElement::BasisType <-- Basis.Basis


}



/'

FiniteElementMethod.FiniteElementSpace::MappingType <-- Geometry.Mapping
FiniteElementMethod.ParentElement::CellType <-- Geometry.Cell.Cell


namespace VirtualElementMethod {
  class VirtualElementInterface {}

}

VirtualElementMethod.VirtualElementInterface <-- Geometry.Cell.Cell
'/



}
ShivaInterface.FiniteElementMethod.FiniteElementSpace::MappingType <-- ShivaInterface.Geometry.Mapping
ShivaInterface.FiniteElementMethod.ParentElement::CellType <-- ShivaInterface.Geometry.Cell.Cell


@enduml